{"version":3,"sources":["store/StateProvider.js","store/actions.js","store/action_types.js","components/SetUser.js","components/StartPage.js","axios.js","components/NewGame.js","components/Spinner.js","components/Quiz.js","store/selectors.js","components/ResultRow.js","components/Result.js","components/WaitingRoom.js","App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","newGame","payload","type","setGameMode","setUser","withStyles","theme","otherStyles","dialog","backgroundColor","dialogActions","display","flexDirection","secondaryBackgroundColor","color","mainTextColor","overflow","inputContainer","width","alignItems","center","marginLeft","marginRight","marginTop","inputColor","borderColor","palette","primary","main","open","setOpen","classes","useState","userName","setUserName","username","dispatch","Dialog","className","onClose","fullWidth","maxWidth","DialogTitle","DialogActions","Input","onKeyDown","e","key","handleSubmit","onChange","target","Button","onClick","fullHeight","minHeight","text","to","Grid","container","spacing","direction","justify","mainBackgroundColor","item","xs","size","button","variant","Typography","instance","axios","create","baseURL","fontSize","padding","borderRadius","modeContainer","height","justifyContent","options","orangeColor","fontWeight","flex","dropDown","icon","fill","halfWidth","menuItem","background","secondaryBackgroundColorHovered","area","setArea","level","setLevel","redirectToQuiz","setRedirectToQuiz","mode","setMode","redirectToRoom","setRedirectToRoom","roomID","setRoomID","startSingleGame","a","post","response","gameMode","data","roomId","quizlist","console","log","startMultiGame","get","selectGameMode","event","getAttribute","pathname","state","Select","name","inputProps","map","cat","MenuItem","toUpperCase","data-value","Spinner","timeout","quiz","quizInfo","textDecoration","quizFinished","quizWords","quizOptions","quizQuestionNumber","currentQuestion","currentGameMode","finished","setFinished","multiFinished","setMultiFinished","submittedAnswers","setSubmittedAnswers","useEffect","socket","socketIOClient","emit","on","gameResult","disconnect","quizQuestions","myAnswers","answers","question","answer","collectAllAnswers","word","idx","option","data-question-number","data-answer","questionNumber","parseInt","selectAnswer","resultsRow","wordContainer","words","marginBottom","wordsColor","answerContainer","spaces","margin","playerName","correctBorder","border","correctAnswer","incorrectBorder","incorrectAnswer","correctIcon","incorrectIcon","userAnswer","otherAnswers","clsx","id","correctOption","incorrectOption","Object","entries","result","paddingBottom","row","link","Array","isArray","keys","includes","isGameFinished","totalScore","forEach","correct","getTotalScore","playerAnswers","correctAnswers","players","player","getTotalScoreOfEveryone","playersAnswers","url","waitingRoom","textTransform","copyInfo","copiedText","playersContainer","borderBottom","match","params","props","setPlayers","copySuccess","setCopySuccess","location","users","usernames","length","copy","App","exact","path","component","StartPage","WaitingRoom","NewGame","Quiz","Result","Boolean","window","hostname","action","slice","assign","createMuiTheme","light","dark","contrastText","secondary","common","selectedColor","cursor","transition","transform","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e19cb66b.chunk.js","sourcesContent":["import React, { createContext, useContext, useReducer } from \"react\";\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children}) => (\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {children}\r\n  </StateContext.Provider>\r\n)\r\n\r\nexport const useStateValue = () => useContext(StateContext);\r\n","import {\r\n  NEW_GAME,\r\n  FINISH_GAME,\r\n  ANSWER_QUESTION,\r\n  SET_USER,\r\n  SET_GAME_MODE,\r\n  SAVE_EVERYONES_ANSWER,\r\n  DELETE_DATA_FROM_STORE,\r\n} from \"./action_types\";\r\n\r\nexport const newGame = (payload) => {\r\n  //payload contains all the fetched quizQuestions\r\n  return {\r\n    type: NEW_GAME,\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const setGameMode = (payload) => {\r\n  return {\r\n    type: SET_GAME_MODE,\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const finishGame = () => {\r\n  return {\r\n    type: FINISH_GAME,\r\n  };\r\n};\r\n\r\nexport const answerQuestion = (payload) => {\r\n  // payload is an answer to a question\r\n  return {\r\n    type: ANSWER_QUESTION,\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const saveEveryonesAnswers = (payload) => {\r\n  //payload contains all the participants's answers in a multiPlayer room\r\n  return {\r\n    type: SAVE_EVERYONES_ANSWER,\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const setUser = (payload) => {\r\n  // payload is the username\r\n  return {\r\n    type: SET_USER,\r\n    payload,\r\n  };\r\n};\r\n\r\nexport const deleteDataFromStore = () => {\r\n  return {\r\n    type: DELETE_DATA_FROM_STORE\r\n  }\r\n}\r\n","export const NEW_GAME = \"NEW_GAME\"\r\n\r\nexport const SET_GAME_MODE = \"SET_GAME_MODE\"\r\n\r\nexport const FINISH_GAME = \"FINISH_GAME\"\r\n\r\nexport const ANSWER_QUESTION = \"ANSWER_QUESTION\"\r\n\r\nexport const SAVE_EVERYONES_ANSWER = \"SAVE_EVERYONES_ANSWER\"\r\n\r\nexport const SET_USER = \"SET_USER\"\r\n\r\nexport const DELETE_DATA_FROM_STORE = \"DELETE_DATA_FROM_STORE\"","import React, { useState } from \"react\";\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\n\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Input from \"@material-ui/core/Input\";\r\n\r\nimport { useStateValue } from \"../store/StateProvider\";\r\nimport { setUser } from \"../store/actions\";\r\n\r\nconst styles = (theme) => ({\r\n  ...theme.otherStyles,\r\n  dialog: {\r\n    backgroundColor: '#2F4459',\r\n  },\r\n  dialogActions: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    backgroundColor: theme.otherStyles.secondaryBackgroundColor.backgroundColor,\r\n    color: theme.otherStyles.mainTextColor.color,\r\n    overflow: 'hidden'\r\n  },\r\n  inputContainer: {\r\n    width: '100%',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    backgroundColor: '#2F4459',\r\n  },\r\n  center: {\r\n    width: '70%',\r\n    marginLeft: 'auto',\r\n    marginRight: 'auto'\r\n  },\r\n  marginTop: {\r\n    marginTop: '20px;'\r\n  },\r\n  inputColor: {\r\n    color: theme.otherStyles.mainTextColor.color,\r\n    \"&:before\": {\r\n      borderColor: theme.palette.primary.main,\r\n    },\r\n    \"&:after\": {\r\n      borderColor: theme.palette.primary.main,\r\n    },\r\n    \"&:hover:not(.Mui-disabled):before\": {\r\n      borderColor: theme.palette.primary.main,\r\n    }\r\n  }\r\n});\r\n\r\nconst SetUser = ({ open, setOpen, classes }) => {\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [{username}, dispatch] = useStateValue();\r\n\r\n  if (username) {\r\n    setOpen(false)\r\n  }\r\n\r\n  const saveName = () => {\r\n    dispatch(setUser(userName));\r\n    setOpen(false)\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    if (e.key === 'Enter') {\r\n      dispatch(setUser(userName));\r\n      setOpen(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Dialog className={classes.dialog} open={open} onClose={() => setOpen(false)} fullWidth maxWidth=\"sm\">\r\n      <DialogTitle className={classes.dialogActions}>Please select your username:</DialogTitle>\r\n      <DialogActions className={classes.dialogActions}>\r\n        <div className={classes.inputContainer}>\r\n          <Input className={`${classes.center} ${classes.inputColor}`} fullWidth color=\"secondary\" type=\"text\" value={userName} onKeyDown={(e) => handleSubmit(e)} onChange={(e) => setUserName(e.target.value)} />\r\n        </div>\r\n        <div className={`${classes.inputContainer} ${classes.marginTop}`}>\r\n          <Button className={classes.center} onClick={() => setOpen(false)} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button className={classes.center} onClick={saveName} color=\"secondary\">\r\n            Save\r\n          </Button>\r\n        </div>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(SetUser);\r\n","import React, { useState } from \"react\";\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\n\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport SetUser from \"./SetUser\";\r\n\r\nimport { useStateValue } from \"../store/StateProvider\";\r\n\r\n\r\nconst styles = (theme) => ({\r\n  ...theme.otherStyles,\r\n  fullHeight: {\r\n    minHeight: \"100vh\",\r\n  },\r\n  text: {\r\n    color: \"#ff5733\"\r\n  }\r\n});\r\n\r\nconst StartPage = ({ classes }) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [{ username }] = useStateValue();\r\n\r\n  //This page has only one purpose, to select a username\r\n\r\n  // user must set a username, if it's already done, then redirect happens automatically\r\n  const startGame = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  // if username is not falsy in the store, the player will be redirected to the new Game page\r\n  if (username) {\r\n    return <Redirect to=\"/newGame\" />;\r\n  }\r\n\r\n  // open a dialog to select a username\r\n  if (open) {\r\n    return <SetUser open={open} setOpen={setOpen} />;\r\n  }\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      spacing={0}\r\n      direction=\"column\"\r\n      alignItems=\"center\"\r\n      justify=\"center\"\r\n      className={`${classes.mainBackgroundColor} ${classes.fullHeight}`}\r\n    >\r\n      <Grid item xs={3}>\r\n        <Button\r\n          size=\"large\"\r\n          className={`${classes.secondaryBackgroundColor} ${classes.button}`}\r\n          variant=\"contained\"\r\n        >\r\n          <Typography\r\n            className={classes.text}\r\n            variant=\"h5\"\r\n            onClick={startGame}\r\n          >\r\n            New Game\r\n          </Typography>\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(StartPage);\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"http://localhost:3030/api/v1\",\r\n});\r\n\r\nexport default instance;\r\n","import React, { useState } from \"react\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport { useStateValue } from \"../store/StateProvider\";\r\n\r\nimport { newGame, setGameMode } from \"../store/actions\";\r\n\r\nimport axios from '../axios';\r\n\r\nconst styles = (theme) => ({\r\n  ...theme.otherStyles,\r\n  button: {\r\n    ...theme.otherStyles.button,\r\n    fontSize: \"30px\",\r\n    padding: \"10px 30px\",\r\n    borderRadius: \"10px\",\r\n  },\r\n  modeContainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    height: \"100vh\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  options: {\r\n    display: \"flex\",\r\n    width: \"50%\",\r\n    alignItems: \"center\",\r\n    \"& > h2\": {\r\n      fontSize: \"36px\",\r\n      color: theme.otherStyles.orangeColor.color,\r\n      fontWeight: 700,\r\n      flex: 0.5,\r\n    },\r\n  },\r\n  dropDown: {\r\n    fontSize: '26px',\r\n    flex: 0.5,\r\n    color: theme.otherStyles.orangeColor.color,\r\n    \"&:before\": {\r\n      borderColor: theme.otherStyles.orangeColor.color,\r\n    },\r\n    \"&:after\": {\r\n      borderColor: theme.otherStyles.orangeColor.color,\r\n    },\r\n    \"&:hover:not(.Mui-disabled):before\": {\r\n      borderColor: theme.otherStyles.orangeColor.color,\r\n    },\r\n    // '&.MuiList-padding': {\r\n    //   paddingTop: 0,\r\n    //   paddingBottom: 0\r\n    // }\r\n  },\r\n  icon: {\r\n    fill: theme.otherStyles.orangeColor.color,\r\n  },\r\n  halfWidth: {\r\n    width: \"50%\",\r\n  },\r\n  menuItem: {\r\n    color: theme.otherStyles.orangeColor.color,\r\n    backgroundColor: theme.otherStyles.secondaryBackgroundColor.backgroundColor,\r\n    '&:hover': {\r\n      background: theme.otherStyles.secondaryBackgroundColorHovered.backgroundColor,\r\n    },\r\n    '&.Mui-selected': {\r\n      background: theme.otherStyles.secondaryBackgroundColor.backgroundColor,\r\n    },\r\n    '&.Mui-selected:hover': {\r\n      background: theme.otherStyles.secondaryBackgroundColorHovered.backgroundColor,\r\n    }\r\n  },\r\n});\r\n\r\nfunction NewGame({ classes }) {\r\n  const [area, setArea] = useState(\"sat\");\r\n  const [level, setLevel] = useState(5);\r\n  const [redirectToQuiz, setRedirectToQuiz] = useState(false);\r\n  const [mode, setMode] = useState(\"\"); // single or multi\r\n  const [redirectToRoom, setRedirectToRoom] = useState(false);\r\n  const [roomID, setRoomID] = useState(\"\");\r\n\r\n  const [{}, dispatch] = useStateValue();\r\n\r\n  const categories = [\r\n    \"es\",\r\n    \"ms\",\r\n    \"hs\",\r\n    \"ksat\",\r\n    \"toeic\",\r\n    \"toefl\",\r\n    \"teps\",\r\n    \"sat\",\r\n    \"ielts\",\r\n    \"gre\",\r\n    \"gmat\",\r\n    \"overall\",\r\n  ];\r\n\r\n  const levels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n\r\n  const startSingleGame = async () => {\r\n    try {\r\n      const response = await axios.post(\"/newSingleGame\", {\r\n        area,\r\n        level\r\n      });\r\n      const mode = {\r\n        gameMode: response.data.gameMode,\r\n        roomId: 'none'\r\n      }\r\n      dispatch(setGameMode(mode));\r\n      dispatch(newGame(response.data.quizlist));\r\n      setRedirectToQuiz(true);\r\n    } catch (error) {\r\n      console.log(error)\r\n      // Error handling\r\n    }\r\n  \r\n  };\r\n\r\n  const startMultiGame = async () => {\r\n    const response = await axios.get(\"/getRoomID\");\r\n    if (typeof response.data === \"string\") {\r\n      setRoomID(response.data);\r\n      setRedirectToRoom(true);\r\n    }\r\n    //error Handling...\r\n  };\r\n\r\n  const selectGameMode = (event) => {\r\n    const gameMode = event.target.getAttribute(\"data-value\");\r\n    setMode(gameMode);\r\n  };\r\n\r\n  if (redirectToQuiz) {\r\n    return (\r\n      <Redirect\r\n        to={{\r\n          pathname: \"/quiz\",\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (redirectToRoom) {\r\n    return (\r\n      <Redirect\r\n        to={{\r\n          pathname: `/room/${roomID}`,\r\n          state: { area, level },\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (!mode) {\r\n    return (\r\n      <div\r\n        className={`${classes.modeContainer} ${classes.mainBackgroundColor}`}\r\n      >\r\n        <h2\r\n          data-value=\"single\"\r\n          className={classes.button}\r\n          onClick={(e) => selectGameMode(e)}\r\n        >\r\n          Single Player\r\n        </h2>\r\n        <h2\r\n          data-value=\"multi\"\r\n          className={classes.button}\r\n          onClick={(e) => selectGameMode(e)}\r\n        >\r\n          Multiplayer\r\n        </h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`${classes.modeContainer} ${classes.mainBackgroundColor}`}>\r\n      <div className={classes.options}>\r\n        <h2>Category</h2>\r\n        <Select\r\n          name=\"area\"\r\n          value={area}\r\n          onChange={(e) => setArea(e.target.value)}\r\n          className={classes.dropDown}\r\n          inputProps={{classes: {\r\n            icon: classes.icon\r\n          }}}\r\n        >\r\n          {categories.map((cat) => (\r\n            <MenuItem key={cat} className={classes.menuItem} value={cat}>\r\n              {cat.toUpperCase()}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </div>\r\n      <div className={classes.options}>\r\n        <h2>Level</h2>\r\n        <Select\r\n          name=\"level\"\r\n          value={level}\r\n          onChange={(e) => setLevel(e.target.value)}\r\n          className={classes.dropDown}\r\n          inputProps={{classes: {\r\n            icon: classes.icon\r\n          }}}\r\n        >\r\n          {levels.map((level) => (\r\n            <MenuItem key={level} className={classes.menuItem} value={level}>\r\n              {level}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </div>\r\n\r\n      <Button\r\n        size=\"large\"\r\n        className={`${classes.button} ${classes.halfWidth}`}\r\n        variant=\"contained\"\r\n        onClick={\r\n          mode === \"single\"\r\n            ? startSingleGame\r\n            : mode === \"multi\"\r\n            ? startMultiGame\r\n            : \"\"\r\n        }\r\n      >\r\n        <Typography variant=\"h5\">Start</Typography>\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withStyles(styles)(NewGame);\r\n","import React from \"react\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <Loader\r\n      type=\"Watch\"\r\n      color=\"#ff5733\"\r\n      height={100}\r\n      width={100}\r\n      timeout={60000}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Spinner;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport { useStateValue } from \"../store/StateProvider\";\r\nimport { answerQuestion, saveEveryonesAnswers } from \"../store/actions\";\r\nimport { Redirect, Link } from \"react-router-dom\";\r\n\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nimport { collectAllAnswers } from \"../store/selectors\";\r\n\r\nimport Spinner from \"./Spinner\";\r\n\r\nconst styles = (theme) => ({\r\n  ...theme.otherStyles,\r\n  quiz: {\r\n    height: \"100vh\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    backgroundColor: theme.otherStyles.mainBackgroundColor.backgroundColor,\r\n  },\r\n  quizInfo: {\r\n    textDecoration: \"underline\",\r\n    color: theme.otherStyles.mainTextColor.color,\r\n  },\r\n  quizFinished: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    \"& > a\": {\r\n      color: theme.otherStyles.orangeColor.color,\r\n      backgroundColor:\r\n        theme.otherStyles.secondaryBackgroundColor.backgroundColor,\r\n      borderRadius: \"5px\",\r\n      padding: \"10px\",\r\n      fontSize: \"40px\",\r\n      fontWeight: 700,\r\n      textDecoration: \"none\",\r\n    },\r\n    \"& > a:hover\": {\r\n      backgroundColor:\r\n        theme.otherStyles.secondaryBackgroundColorHovered.backgroundColor,\r\n    },\r\n  },\r\n  quizWords: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-evenly\",\r\n    \"& > h3\": {\r\n      fontSize: \"25px\",\r\n      color: theme.palette.primary.main,\r\n    },\r\n  },\r\n  quizOptions: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-evenly\",\r\n    marginTop: \"5vh\",\r\n    \"& > h3\": {\r\n      padding: \"10px\",\r\n      fontSize: \"25px\",\r\n      borderRadius: \"3px\",\r\n    },\r\n    \"& h3:not(:first-child)\": {\r\n      marginLeft: \"5%\",\r\n    },\r\n  },\r\n  quizQuestionNumber: {\r\n    color: theme.otherStyles.orangeColor.color,\r\n    fontWeight: 500,\r\n  },\r\n  container: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    '& > h3': {\r\n      fontSize: '25px',\r\n      fontWeight: 500,\r\n      marginTop: '25px',\r\n      color: theme.otherStyles.mainTextColor.color\r\n    },\r\n    '& > h3:first-child': {\r\n      color: theme.otherStyles.orangeColor.color\r\n    }\r\n  },\r\n  button: {\r\n    ...theme.otherStyles.button,\r\n    fontSize: '25px',\r\n    padding: '10px',\r\n    borderRadius: '3px'\r\n  }\r\n});\r\n\r\nconst ENDPOINT = \"http://localhost:3030\";\r\n\r\nconst Quiz = ({ classes }) => {\r\n  const [\r\n    { quiz, currentQuestion, currentGameMode, username },\r\n    dispatch,\r\n  ] = useStateValue();\r\n  const [finished, setFinished] = useState(false); // finished game in SinglePLayer mode or finished my game in multiPlayer mode\r\n  const [multiFinished, setMultiFinished] = useState(false); // when server informs us, that everyone finished the game or the time limit passed\r\n  const [submittedAnswers, setSubmittedAnswers] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (currentGameMode.gameMode === 'singlePlayer') return;\r\n\r\n    const socket = socketIOClient(ENDPOINT);\r\n\r\n    socket.emit(\"join-room\", currentGameMode.roomId, username);\r\n\r\n    socket.on(\"quiz-finished\", (gameResult) => {\r\n      console.log(gameResult);\r\n      dispatch(saveEveryonesAnswers(gameResult))\r\n      setMultiFinished(true);\r\n    });\r\n\r\n    return () => socket.disconnect();\r\n  }, []);\r\n\r\n  const selectAnswer = (event) => {\r\n    const questionNumber = parseInt(\r\n      event.target.getAttribute(\"data-question-number\")\r\n    );\r\n    const answer = parseInt(event.target.getAttribute(\"data-answer\"));\r\n    dispatch(answerQuestion({ questionNumber, answer }));\r\n\r\n    if (currentQuestion === 9) {\r\n      setFinished(true);\r\n      return;\r\n    }\r\n  };\r\n\r\n  // redirect if the user comes to this page without starting a newGame or did not have a saved game\r\n  if (!quiz?.quizQuestions) {\r\n    return <Redirect to=\"/newGame\" />;\r\n  }\r\n\r\n  const submitAnswersToServer = () => {\r\n      const myAnswers = collectAllAnswers(quiz.quizQuestions);\r\n      const socket = socketIOClient(ENDPOINT);\r\n      socket.emit(\r\n        \"submit-answers\",\r\n        currentGameMode.roomId,\r\n        username,\r\n        myAnswers\r\n      );\r\n      setSubmittedAnswers(true);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.quiz}>\r\n      <div className={classes.halfWidth}>\r\n        {(finished && currentGameMode.gameMode === \"singlePlayer\") ||\r\n        multiFinished ? (\r\n          <div className={classes.quizFinished}>\r\n            <Link to=\"/result\">Check Result</Link>\r\n          </div>\r\n        ) : finished && currentGameMode.gameMode === \"multiPlayer\" ? (\r\n          <div className={classes.container}>\r\n            {\r\n              !submittedAnswers ? (\r\n                <button className={classes.button} onClick={submitAnswersToServer}>Send</button>\r\n              ) : (\r\n                <h3>Answers sent to server</h3>\r\n              )\r\n            }\r\n            <h3>Waiting for other players....</h3>\r\n            <Spinner />\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <Typography variant=\"h3\" className={classes.quizQuestionNumber}>\r\n              {currentQuestion + 1} / 10\r\n            </Typography>\r\n            <h3 className={classes.quizInfo}>\r\n              Select the most related word to the first 3 ones!\r\n            </h3>\r\n            <div className={classes.quizWords}>\r\n              {quiz.quizQuestions[currentQuestion].quiz.map((word, idx) => (\r\n                <h3 key={idx}>{word}</h3>\r\n              ))}\r\n            </div>\r\n            <div className={classes.quizOptions}>\r\n              {quiz.quizQuestions[currentQuestion].option.map((option, idx) => (\r\n                <h3\r\n                  className={classes.button}\r\n                  key={idx}\r\n                  data-question-number={currentQuestion}\r\n                  data-answer={idx + 1}\r\n                  onClick={(e) => selectAnswer(e)}\r\n                >\r\n                  {option}\r\n                </h3>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(Quiz);\r\n","export const isGameFinished = (quizQuestions) => {\r\n  if (!Array.isArray(quizQuestions)) return false;\r\n\r\n  let finished = true;\r\n\r\n  quizQuestions.map((question) => {\r\n    if (!Object.keys(question).includes(\"answer\")) finished = false;\r\n  });\r\n  return finished;\r\n};\r\n\r\nexport const getTotalScore = (quizQuestions) => {\r\n  let totalScore = 0;\r\n\r\n  quizQuestions.forEach((question) => {\r\n    if (question.answer === question.correct) {\r\n      totalScore += 1;\r\n    }\r\n  });\r\n\r\n  return totalScore;\r\n};\r\n\r\nexport const collectAllAnswers = (quizQuestions) => {\r\n  const answers = quizQuestions.map((question) => question.answer);\r\n  console.log(answers);\r\n  return answers;\r\n};\r\n\r\nexport const getTotalScoreOfEveryone = (quizQuestions, playerAnswers) => {\r\n  // create an array of numbers with the correct answer's numbers\r\n  const correctAnswers = quizQuestions.map((question) => question.correct);\r\n  // create an object with username keys\r\n  const players = {};\r\n  Object.keys(playerAnswers[0]).forEach((player) => (players[player] = 0));\r\n  // Calculate the number of correct answers of every player\r\n  playerAnswers.forEach((question, questionNumber) => {\r\n    Object.entries(question).forEach(([username, answer]) => {\r\n      if (answer === correctAnswers[questionNumber]) {\r\n        players[username] += 1;\r\n      }\r\n    });\r\n  });\r\n  return players;\r\n};\r\n","import React from \"react\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport clsx from \"clsx\";\r\n\r\nimport CheckIcon from \"@material-ui/icons/Check\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\n\r\nconst styles = (theme) => ({\r\n  ...theme.otherStyles,\r\n  container: {\r\n    width: '100%',\r\n  },\r\n  resultsRow: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-evenly\",\r\n    marginTop: \"10px\",\r\n    padding: \"5px\",\r\n    borderRadius: \"5px\",\r\n    width: \"60%\",\r\n    marginLeft: 'auto',\r\n    marginRight: 'auto'\r\n  },\r\n  wordContainer: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  words: {\r\n    padding: \"5px\",\r\n    borderRadius: \"2px\",\r\n    marginRight: \"10px\",\r\n    marginTop: \"5px\",\r\n    marginBottom: \"5px\",\r\n  },\r\n  wordsColor: {\r\n    backgroundColor: theme.otherStyles.secondaryBackgroundColor.backgroundColor,\r\n    color: \"white\",\r\n  },\r\n  answerContainer: {\r\n    marginTop: \"5px\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-between\",\r\n    width: '20%',\r\n    marginLeft: 'auto',\r\n    marginRight: 'auto',\r\n    '& > div': {\r\n      width: '100%'\r\n    }\r\n  },\r\n  spaces: {\r\n    margin: 0,\r\n    padding: \"5px\",\r\n  },\r\n  playerName: {\r\n    fontSize: \"24px\",\r\n    color: theme.otherStyles.mainTextColor.color,\r\n    padding: '5px'\r\n  },\r\n  correctBorder: {\r\n    border: \"3px solid\",\r\n    borderColor: theme.otherStyles.correctAnswer.backgroundColor,\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center'\r\n  },\r\n  incorrectBorder: {\r\n    border: \"3px solid\",\r\n    borderColor: theme.otherStyles.incorrectAnswer.backgroundColor,\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center'\r\n  },\r\n  correctIcon: {\r\n    color: theme.otherStyles.correctAnswer.backgroundColor,\r\n    fontWeight: 700\r\n  },\r\n  incorrectIcon: {\r\n    color: theme.otherStyles.incorrectAnswer.backgroundColor,\r\n    fontWeight: 700\r\n  }\r\n});\r\n\r\nconst ResultRow = ({\r\n  userAnswer,\r\n  correctAnswer,\r\n  options,\r\n  words,\r\n  otherAnswers,\r\n  classes,\r\n}) => {\r\n  return (\r\n    <div className={classes.container}>\r\n      <div\r\n        className={clsx(\r\n          classes.resultsRow,\r\n          userAnswer === correctAnswer\r\n            ? classes.correctAnswer\r\n            : classes.incorrectAnswer\r\n        )}\r\n      >\r\n        <div className={classes.wordContainer}>\r\n          {words.map((word, id) => (\r\n            <h2 key={word} className={clsx(classes.words, classes.wordsColor)}>\r\n              {word}\r\n            </h2>\r\n          ))}\r\n        </div>\r\n        <div className={classes.wordContainer}>\r\n          {options.map((option, id) => (\r\n            <h2\r\n              key={option}\r\n              className={clsx(\r\n                classes.words,\r\n                id + 1 === correctAnswer\r\n                  ? classes.correctOption\r\n                  : classes.incorrectOption\r\n              )}\r\n            >\r\n              {option}\r\n            </h2>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      {otherAnswers && (\r\n        <div className={classes.answerContainer}>\r\n          {Object.entries(otherAnswers).map(([username, answer]) => (\r\n            <div\r\n              className={\r\n                (answer === correctAnswer\r\n                  ? classes.correctBorder\r\n                  : classes.incorrectBorder)\r\n              }\r\n            >\r\n              <h3 className={clsx(classes.playerName, classes.spaces)}>{username}:</h3>\r\n              {answer === correctAnswer ? (\r\n                <CheckIcon className={clsx(classes.correctIcon, classes.spaces)} />\r\n              ) : (\r\n                <ClearIcon className={clsx(classes.incorrectIcon, classes.spaces)} />\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(ResultRow);\r\n","import React, { useEffect } from \"react\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport { useStateValue } from \"../store/StateProvider\";\r\nimport {\r\n  isGameFinished,\r\n  getTotalScore,\r\n  getTotalScoreOfEveryone,\r\n} from \"../store/selectors\";\r\nimport { deleteDataFromStore } from \"../store/actions\";\r\n\r\nimport { Link, Redirect } from \"react-router-dom\";\r\n\r\nimport ResultRow from \"./ResultRow\";\r\nimport { Button, Typography } from \"@material-ui/core\";\r\n\r\nconst styles = (theme) => ({\r\n  ...theme.otherStyles,\r\n  result: {\r\n    backgroundColor: theme.otherStyles.mainBackgroundColor.backgroundColor,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    paddingBottom: \"20px\",\r\n    \"& > div > h2, & > div > div > h2\": {\r\n      fontSize: \"32px\",\r\n      color: theme.otherStyles.orangeColor.color,\r\n      fontWeight: \"900\",\r\n    },\r\n  },\r\n  row: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    width: \"60%\",\r\n  },\r\n  text: {\r\n    color: theme.otherStyles.orangeColor.color,\r\n  },\r\n  link: {\r\n    textDecoration: \"none\",\r\n    display: \"block\",\r\n  },\r\n});\r\n\r\nfunction Result({ classes }) {\r\n  const [\r\n    {\r\n      quiz,\r\n      currentGameMode: { gameMode },\r\n    },\r\n    dispatch,\r\n  ] = useStateValue();\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(deleteDataFromStore());\r\n    };\r\n  });\r\n\r\n  if (!quiz?.quizQuestions || !isGameFinished(quiz?.quizQuestions)) {\r\n    return <Redirect to=\"/quiz\" />;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.result}>\r\n      <div className={classes.row}>\r\n        {gameMode === \"singlePlayer\" ? (\r\n          <h2>Total Score: {getTotalScore(quiz.quizQuestions)} / 10</h2>\r\n        ) : (\r\n          <div>\r\n            {Object.entries(\r\n              getTotalScoreOfEveryone(quiz.quizQuestions, quiz.playersAnswers)\r\n            ).map(([username, totalScore], id) => (\r\n              <h2 key={id}>\r\n                {username}: {totalScore} / 10\r\n              </h2>\r\n            ))}\r\n          </div>\r\n        )}\r\n        <Link to=\"/newGame\" className={classes.link}>\r\n          <Button size=\"large\" className={classes.button} variant=\"contained\">\r\n            <Typography className={classes.text} variant=\"h5\">\r\n              New Game\r\n            </Typography>\r\n          </Button>\r\n        </Link>\r\n      </div>\r\n      {quiz.quizQuestions.map((question, id) => (\r\n        <ResultRow\r\n          key={id}\r\n          userAnswer={question.answer}\r\n          correctAnswer={question.correct}\r\n          options={question.option}\r\n          words={question.quiz}\r\n          otherAnswers={\r\n            gameMode === \"multiPlayer\" ? quiz.playersAnswers[id] : false\r\n          }\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withStyles(styles)(Result);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport copy from \"copy-to-clipboard\";\r\nimport clsx from 'clsx';\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport SetUser from \"./SetUser\";\r\n\r\nimport socketIOClient from \"socket.io-client\";\r\nimport { useStateValue } from \"../store/StateProvider\";\r\n\r\nimport { newGame, setGameMode } from \"../store/actions\";\r\nimport { Typography } from \"@material-ui/core\";\r\n\r\nconst ENDPOINT = \"http://localhost:3030\";\r\n\r\nconst url = \"http://localhost:3000/room/\";\r\n\r\nconst styles = (theme) => ({\r\n  ...theme.otherStyles,\r\n  waitingRoom: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    height: \"100vh\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    backgroundColor: theme.otherStyles.mainBackgroundColor.backgroundColor,\r\n    color: theme.otherStyles.mainTextColor.color,\r\n    \"& > h3 > span\": {\r\n      color: theme.otherStyles.orangeColor.color,\r\n    },\r\n  },\r\n  button: {\r\n    ...theme.otherStyles.button,\r\n    fontSize: \"25px\",\r\n    padding: \"10px\",\r\n    borderRadius: \"3px\",\r\n    textTransform: 'capitalize'\r\n  },\r\n  copyInfo: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n  },\r\n  copiedText: {\r\n    color: theme.otherStyles.orangeColor.color,\r\n    marginLeft: \"30px\",\r\n  },\r\n  playersContainer: {\r\n    backgroundColor: theme.otherStyles.secondaryBackgroundColor.backgroundColor,\r\n    width: '60%',\r\n    marginTop: '30px',\r\n    '& > h3': {\r\n      width: '80%',\r\n      color: theme.otherStyles.orangeColor.color,\r\n      marginLeft: '10%',\r\n      fontSize: '25px',\r\n      borderBottom: `1px solid ${theme.otherStyles.orangeColor.color}`\r\n    }\r\n  },\r\n  marginTop: {\r\n    marginTop: '30px'\r\n  }\r\n});\r\n\r\nconst WaitingRoom = ({\r\n  classes,\r\n  match: {\r\n    params: { roomID },\r\n  },\r\n  ...props\r\n}) => {\r\n  const [{ username }, dispatch] = useStateValue();\r\n  const [players, setPlayers] = useState([username]);\r\n  const [open, setOpen] = useState(true); // dialog if user has no username in the store\r\n  const [redirectToQuiz, setRedirectToQuiz] = useState(false);\r\n  const [copySuccess, setCopySuccess] = useState(false);\r\n\r\n  //These came with Redirect props, but only for the room creator!!!\r\n  const area = props.location.state?.area;\r\n  const level = props.location.state?.level;\r\n\r\n  useEffect(() => {\r\n    if (!username) return;\r\n\r\n    const socket = socketIOClient(ENDPOINT);\r\n    socket.emit(\"join-room\", roomID, username);\r\n\r\n    socket.on(\"user-connected\", (users) => {\r\n      const usernames = Object.keys(users)\r\n      setPlayers(usernames);\r\n    });\r\n\r\n    socket.on(\"quiz-list\", (quizlist, gameMode) => {\r\n      const mode = {\r\n        gameMode,\r\n        roomId: roomID\r\n      }\r\n      dispatch(setGameMode(mode));\r\n      dispatch(newGame(quizlist));\r\n      setRedirectToQuiz(true);\r\n    });\r\n\r\n    return () => socket.disconnect();\r\n  }, [players.length, username]);\r\n\r\n  const startGame = () => {\r\n    const socket = socketIOClient(ENDPOINT);\r\n    socket.emit(\"startGame\", roomID, area, level);\r\n  };\r\n\r\n  const copyURL = () => {\r\n    copy(`${url}${roomID}`);\r\n    setCopySuccess(true);\r\n  };\r\n\r\n  if (!username) {\r\n    return <SetUser open={open} setOpen={setOpen} />;\r\n  }\r\n\r\n  if (redirectToQuiz) {\r\n    return (\r\n      <Redirect\r\n        to={{\r\n          pathname: \"/quiz\",\r\n          state: { roomID },\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.waitingRoom}>\r\n      <Typography variant=\"h3\">Welcome in the waiting room!</Typography>\r\n      <h3>\r\n        Send this link to invite others: <span>{`${url}${roomID}`}</span>\r\n      </h3>\r\n      <div className={classes.copyInfo}>\r\n        <Button variant=\"contained\" className={classes.button} onClick={copyURL}>\r\n          Copy Link to Clipboard\r\n        </Button>\r\n        {copySuccess && <h3 className={classes.copiedText}>URL Copied</h3>}\r\n      </div>\r\n      <div className={classes.playersContainer}>\r\n        {players.map((player) => (\r\n          <h3 key={player}>{player}</h3>\r\n        ))}\r\n      </div>\r\n      {players[0] === username && (\r\n        <Button variant=\"contained\" className={clsx(classes.button, classes.marginTop)} onClick={startGame}>\r\n          Start Game\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withStyles(styles)(WaitingRoom);\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport StartPage from \"./components/StartPage\";\nimport NewGame from \"./components/NewGame\";\nimport Quiz from \"./components/Quiz\";\nimport Result from \"./components/Result\";\nimport WaitingRoom from './components/WaitingRoom';\n\nconst App = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={StartPage} />\n        <Route exact path=\"/room/:roomID\" component={WaitingRoom} />\n        <Route path=\"/newGame\" component={NewGame} />\n        <Route path=\"/quiz\" component={Quiz} />\n        <Route path=\"/result\" component={Result} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  NEW_GAME,\r\n  FINISH_GAME,\r\n  ANSWER_QUESTION,\r\n  SET_USER,\r\n  SET_GAME_MODE,\r\n  SAVE_EVERYONES_ANSWER,\r\n  DELETE_DATA_FROM_STORE,\r\n} from \"./action_types\";\r\n\r\nexport const initialState = {\r\n  username: \"\",\r\n  quiz: {\r\n    quizQuestions: null,\r\n    playersAnswers: null\r\n  },\r\n  currentQuestion: 0,\r\n  currentGameMode: {\r\n    gameMode: '',\r\n    roomId: ''\r\n  }\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case SET_USER:\r\n      return { ...state, username: action.payload };\r\n\r\n    case NEW_GAME:\r\n      return {\r\n        ...state,\r\n        quiz: { ...state.quiz, quizQuestions: action.payload },\r\n      };\r\n\r\n    case SET_GAME_MODE:\r\n      return { ...state, currentGameMode: action.payload };\r\n\r\n    case FINISH_GAME:\r\n      return { ...state, quiz: null };\r\n\r\n    case ANSWER_QUESTION:\r\n      return {\r\n        ...state,\r\n        currentQuestion:\r\n          state.currentQuestion === 9\r\n            ? state.currentQuestion\r\n            : state.currentQuestion + 1,\r\n        quiz: {\r\n          ...state.quiz,\r\n          quizQuestions: [\r\n            ...state.quiz.quizQuestions.slice(0, action.payload.questionNumber),\r\n            Object.assign(\r\n              {},\r\n              state.quiz.quizQuestions[action.payload.questionNumber],\r\n              {\r\n                answer: action.payload.answer,\r\n              }\r\n            ),\r\n            ...state.quiz.quizQuestions.slice(\r\n              action.payload.questionNumber + 1\r\n            ),\r\n          ],\r\n        },\r\n      };\r\n\r\n    case SAVE_EVERYONES_ANSWER:\r\n      return {\r\n        ...state,\r\n        quiz: { ...state.quiz, playersAnswers: action.payload },\r\n      };\r\n\r\n    case DELETE_DATA_FROM_STORE:\r\n      return {\r\n        ...state,\r\n        quiz: null,\r\n        currentQuestion: 0,\r\n        currentGameMode: null\r\n      }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { StateProvider } from \"./store/StateProvider\";\nimport reducer, { initialState } from \"./store/reducer\";\n\nimport { ThemeProvider as MuiThemeProvider } from \"@material-ui/core/styles\";\nimport createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\n\nconst styles = {\n  palette: {\n    primary: {\n      light: \"#dd33fa\",\n      main: \"#d500f9\",\n      dark: \"#9500ae\",\n      contrastText: \"#fff\",\n    },\n    secondary: {\n      light: \"#70d9e7\",\n      main: \"#4dd0e1\",\n      dark: \"#35919d\",\n      contrastText: \"#fff\",\n    },\n    common: {\n      light: \"#ff785b\",\n      main: \"#ff5733\",\n      dark: \"#b23c23\",\n      contrastText: \"#fff\",\n    },\n  },\n  otherStyles: {\n    mainBackgroundColor: {\n      backgroundColor: \"rgb(23,34,44)\",\n    },\n    secondaryBackgroundColor: {\n      backgroundColor: '#30445C',\n    },\n    secondaryBackgroundColorHovered: {\n      backgroundColor: '#3c5573',\n    },\n    mainTextColor: {\n      color: '#9BA8B5',\n    },\n    selectedColor: {\n      backgroundColor: \"#E78230\",\n    },\n    orangeColor: {\n      color: \"#ff5733\"\n    },\n    correctAnswer: {\n      backgroundColor: '#8FE6C5',\n    },\n    correctOption: {\n      backgroundColor: '#36f443',\n      color: 'white'\n    },\n    incorrectAnswer: {\n      backgroundColor: '#F08080',\n    },\n    incorrectOption: {\n      backgroundColor: '#ff3d00',\n      color: 'white'\n    },\n    button: {\n      backgroundColor: '#30445C',\n      color: \"#ff5733\",\n      cursor: \"pointer\",\n      '&:hover': {\n        background: \"#3c5573\",\n        transition: \"100ms transform ease-in\",\n        transform: \"scale(1.08)\"\n     }\n    },\n    halfWidth: {\n      width: '50%'\n    }\n  }\n};\n\nconst theme = createMuiTheme(styles);\n\nReactDOM.render(\n  <React.StrictMode>\n    <MuiThemeProvider theme={theme}>\n      <StateProvider initialState={initialState} reducer={reducer}>\n        <App />\n      </StateProvider>\n    </MuiThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}